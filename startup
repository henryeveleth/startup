#!/usr/bin/env ruby
require 'optparse'
require 'byebug'
require 'yaml'

@config = begin
	f = File.join(__dir__,"/config.yml")
	f = File.open(f)
  YAML.load(f)
rescue Errno::ENOENT
	puts "Config not provided!"
	exit
end

valid_options = @config["valid_options"]

#TODO remove this optparse now that a config is being used
options = {:services => []}
OptionParser.new do |parser|
	parser.banner = "Usage: startup <app-name> [options]"
	parser.on("-p=s","--port","Port for application.") {|port| options[:port] = port}
	parser.on("--profile=s","iTerm2 profile.") {|profile| options[:profile] = profile}
	parser.on("-s","--services s1,s2,...",Array,"Services to startup.") {|services| options[:services] += services}
end.parse!
options[:services] += ARGV[1...ARGV.length]

app = ARGV.first
puts "Please provide a better app name." unless valid_options.include? app
exit unless valid_options.include? app

def osascript(script)
  system 'osascript', *script.split(/\n/).map { |line| ['-e', line] }.flatten
end

def startup(app, port, profile, services)
	git_directory = @config["git_directory"]
	directory = @config["apps"][app]["directory"]
	port = @config["apps"][app]["defaults"]["port"] if port.nil?
	profile = @config["apps"][app]["defaults"]["profile"] if profile.nil?
	# TODO clean this up, refactor
	services = if services.any?
								services = services.map {|s| @config["aliases"]["services"][s]}
								services = services.flatten.select {|s| @config["apps"][app]["services"].include?(s) }
							else
								@config["apps"][app]["services"]
							end
	services.flatten!
	services.map! {|s| [s,@config["aliases"]["commands"][s].first]}
	services = services.to_h
  
	if app == "pinchme"
    terminal_start = <<-END
      tell application "iTerm2"
        activate
        set terminal to (create window with #{if profile == 'default' then 'default profile' else 'profile "' + profile + '"' end})
      END
    
    # For now just close the first tab. Later, try moving it to end of tabs list.
    terminal_first_sesh = <<-END
      tell first session of first tab of terminal
        close
      end tell
    END
    
    # TODO refactor this
    services_tabs_raw = ""
    services.each do |k,v|
      command = (k == "server") ? v + " -p " + port.to_s : v 
      services_tabs_raw += <<-END
        tell terminal
            set t to (create tab with default profile)
            tell first session of t
                write text "cd #{git_directory + directory}"
                write text "clear"
                write text "#{command}"
        
                set name to "#{app} #{k} #{port}"
            end tell
        end tell
      END
    end
    
    service_tabs = <<-END
      #{services_tabs_raw}
    END
    
    terminal_end = <<-END
      end tell 
    END
    
		osascript (terminal_start + service_tabs + terminal_first_sesh + terminal_end)
	elsif app == "seeker"
		port = "3003" if port.nil?
		osascript <<-END
			tell application "iTerm2"
				activate
				set terminal to (create window with default profile)
				
				# Seeker server
				tell first session of first tab of terminal
					write text "cd ~/GIT/Seeker"
					write text "clear"
					write text "rails s -p #{port}"

					set name to "seeker s #{port}"
				end tell

				# Seeker console
			  tell terminal
			      set t to (create tab with default profile)
			      tell first session of t
			          write text "cd ~/GIT/Seeker"
			          write text "clear"
			          write text "rails c"

			          set name to "seeker c #{port}"
			      end tell
			  end tell

				# Kinesis
			  tell terminal
			      set t to (create tab with default profile)
			      tell first session of t
			          write text "cd ~/GIT/Seeker"
			          write text "clear"
			          write text "rake kinesis:run"

			          set name to "kinesis"
			      end tell
			  end tell

				# Elasticsearch
				tell terminal
						set t to (create tab with default profile)
						tell first session of t
								write text "cd ~/GIT/Seeker"
								write text "clear"
								write text "/usr/local/elasticsearch-5.5.0/bin/elasticsearch"

								set name to "es 9200"
						end tell
				end tell

				# Kibana
				tell terminal
						set t to (create tab with default profile)
						tell first session of t
								write text "cd ~/GIT/Seeker"
								write text "clear"
								write text "/usr/local/kibana-5.4.1-darwin-x86_64/bin/kibana"

								set name to "kibana 5601"
						end tell
				end tell

				# SeekerGUI
				tell terminal
						set t to (create tab with default profile)
						tell first session of t
								write text "cd ~/GIT/SeekerGUI"
								write text "clear"
								write text "PORT=7777 npm start"

								set name to "seeker gui"
						end tell
				end tell
		 	end tell
		END
	elsif app == "ledger"
		port = "3002" if port.nil?
		osascript <<-END
			tell application "iTerm2"
				activate
				set terminal to (create window with default profile)
				
				# Ledger Server
				tell first session of first tab of terminal
					write text "cd ~/GIT/Ledger"
					write text "clear"
					write text "rails s -p #{port}"

					set name to "ledger s #{port}"
				end tell

				# Ledger Console
				tell terminal
						set t to (create tab with default profile)
						tell first session of t
								write text "cd ~/GIT/Ledger"
								write text "clear"
								write text "rails c"

								set name to "ledger c #{port}"
						end tell
				end tell
			end tell
		END
	elsif app == "profiler"
		port = "3001" if port.nil?
		osascript <<-END
			tell application "iTerm2"
				activate
				set terminal to (create window with default profile)
				
				# Profiler Server
				tell first session of first tab of terminal
					write text "cd ~/GIT/Profiler"
					write text "clear"
					write text "rails s -p #{port}"

					set name to "profiler s #{port}"
				end tell
				
				# Profiler Console
				tell terminal
						set t to (create tab with default profile)
						tell first session of t
								write text "cd ~/GIT/Profiler"
								write text "clear"
								write text "rails c"

								set name to "profiler c #{port}"
						end tell
				end tell
		 	end tell
		END
	elsif app == "apps"
		osascript <<-END
			tell application "Slack"
				activate
			end tell
			
			tell application "Sequel Pro"
				activate
			end tell
			
			tell application "Firefox"
				activate
			end tell
			
			tell application "Evernote"
				activate
			end tell
			
			tell application "Atom"
				activate
			end tell
			
			tell application "Microsoft Outlook"
				activate
			end tell
			
			tell application "Postman"
				activate
			end tell
		END
	elsif app == "all"
		startup("pinchme")
		startup("seeker")
		startup("ledger")
		startup("profiler")
	end
end

startup(app,options[:port],options[:profile],options[:services])
