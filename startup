#!/usr/bin/env ruby
require 'optparse'
require 'byebug'
require 'yaml'

CONFIG_FILE = "config.yml"

class Startup
	def initialize(app, options={})
		@@config =
			begin
				f = File.join(__dir__,"/#{CONFIG_FILE}")
				f = File.open(f)
			  YAML.load(f)
			rescue Errno::ENOENT
				puts "Config not provided!"
				exit
			end

		@app = app

		if !@@config["valid_options"].include? @app
			puts "App name not valid! Options are [#{@@config['valid_options'].join(', ')}]."
			exit
		end

		@git_directory = @@config["git_directory"]
		@directory = @@config["apps"][@app]["directory"]

		@port = options[:port] || @@config["apps"][@app]["defaults"]["port"]
		@profile = options[:profile] || @@config["apps"][@app]["defaults"]["profile"]

		@services = if options[:services].any?
									options[:services]
								else
									@@config["apps"][@app]["services"]
								end
	end

	def process_services
		@services = @services.map {|s| @@config["aliases"]["services"][s] || s}
		@services = @services.flatten.select {|s| @@config["apps"][@app]["services"].include?(s) }
		@services = @services.map {|s| [s,@@config["aliases"]["commands"][s].first]}
		@services = @services.to_h
	end

	def execute
		if @app == "apps"
			osascript <<-END
				tell application "Slack"
					activate
				end tell

				tell application "Sequel Pro"
					activate
				end tell

				tell application "Firefox"
					activate
				end tell

				tell application "Evernote"
					activate
				end tell

				tell application "Atom"
					activate
				end tell

				tell application "Microsoft Outlook"
					activate
				end tell

				tell application "Postman"
					activate
				end tell
			END
		elsif @app == "all"
			execute("pinchme")
			execute("seeker")
			execute("ledger")
			execute("profiler")
		else
			process_services
			profile_string = if @profile == 'default'
												'default profile'
											 else
												'profile "' + @profile + '"'
											 end

			terminal_start = <<-END
				tell application "iTerm2"
					activate
					set terminal to (create window with #{profile_string})
				END

			# For now just close the first tab. Later, try moving it to end of tabs list.
			terminal_first_sesh = <<-END
				tell first session of first tab of terminal
					close
				end tell
			END

			services_tabs_raw = ""
			@services.each do |k,v|
				command = (k == "server") ? v + " -p " + @port.to_s : v

				if @app == 'seekergui'
					command = "PORT=" + @port.to_s + " " + v
				end

				services_tabs_raw += <<-END
					tell terminal
							set t to (create tab with default profile)
							tell first session of t
									write text "cd #{@git_directory + @directory}"
									write text "clear"
									write text "#{command}"

									set name to "#{@app} #{k} #{@port}"
							end tell
					end tell
				END
			end

			service_tabs = <<-END
				#{services_tabs_raw}
			END

			terminal_end = <<-END
				end tell
			END

			osascript (terminal_start + service_tabs + terminal_first_sesh + terminal_end)
		end
	end

	def osascript(script)
		system 'osascript', *script.split(/\n/).map { |line| ['-e', line] }.flatten
	end
end

options = {:services => []}
OptionParser.new do |parser|
	parser.banner = "Usage: startup <app-name> [options]"
	parser.on("-p=s","--port","Port for application.") {|port| options[:port] = port}
	parser.on("--profile=s","iTerm2 profile.") {|profile| options[:profile] = profile}
	parser.on("-s","--services s1,s2,...",Array,"Services to startup.") {|services| options[:services] += services}
end.parse!
options[:services] += ARGV[1...ARGV.length]

app = ARGV.first

Startup.new(app, options).execute
